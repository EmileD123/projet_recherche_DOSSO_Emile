"""
#pour la lisibilité on va afficher uniquement certaines valeurs intermédiaires sur les axes (et non pas toutes les valeurs des listes comme c'est fait automatiquement)

x_min = min(zHD)
x_max = max(zHD)
x_intermediate_values = []
for i in range(9):
    x = zHD[100+i*200]
    x_intermediate_values.append(x)

y_min = min(MU_SHOES)
y_max = max(MU_SHOES)
y_intermediate_values = []  
for i in range(17):
    y = MU_SHOES[100+i*100]
    y_intermediate_values.append(y)

#x_tick_labels =  [x_min] + x_intermediate_values + [x_max]
y_tick_labels =  [y_min] + y_intermediate_values + [y_max]

#plt.xticks([x_min] + x_intermediate_values + [x_max])
plt.yticks([y_min] + y_intermediate_values + [y_max])



zHD = zHD.astype(float)
MU_SHOES = MU_SHOES.astype(float) #pour éviter des problèmes d'incompatibilité
"""
"""

#tentative 1
degree = 1
coefficients = np.polyfit(np.log(zHD), MU_SHOES, degree)
# Generate x values for the smooth curve
x_smooth = np.linspace(min(zHD),max(zHD), 100000)
# Evaluate the polynomial at these x values
y_smooth = np.polyval(coefficients, x_smooth)
plt.plot(x_smooth, y_smooth, label='Fitted Curve')

#tentative 2
def logarithmic_function(zHD, a, b,c):
    return a * (np.log(zHD*b)-1 )

params, covariance = curve_fit(logarithmic_function, zHD, MU_SHOES)
x_smooth = np.linspace(min(zHD), max(zHD), 1701)
y_smooth = logarithmic_function(x_smooth, *params)
plt.plot(x_smooth, y_smooth, label='Fitted Log Curve')
"""